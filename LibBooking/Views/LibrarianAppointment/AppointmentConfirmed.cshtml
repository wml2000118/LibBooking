@using System.Text.Json
@model LibBooking.Models.LibrarianAppointmentViewModel

@{
    ViewData["Title"] = "Review Appointment";
}

<div class="card mt-4 shadow-lg">
    <div class="card-header bg-secondary text-white text-center py-3">
        <h2>Review Appointment</h2>
    </div>
    <div class="card-body">
        @if (!string.IsNullOrEmpty(ViewBag.Message))
        {
            <div class="alert @(ViewBag.Message.Contains("成功") ? "alert-success" : "alert-danger")">
                @ViewBag.Message
            </div>
        }

        <form id="appointmentForm">
            <div class="form-group mb-3">
                <label for="librarianName" class="font-weight-bold">Librarian:</label>
                <input type="text" id="librarianName" name="LibrarianName" value="@Model.LibrarianName" class="form-control bg-light" readonly />
            </div>

            <div class="form-group mb-3">
                <label for="appointmentDate" class="font-weight-bold">Date:</label>
                <input type="text" id="appointmentDate" name="AppointmentDate" value="@Model.AppointmentDate.ToString("yyyy-MM-dd")" class="form-control bg-light" readonly />
            </div>

            <div class="form-group mb-3">
                <label for="time" class="font-weight-bold">Time:</label>
                <input type="text" id="time" name="Time" value="@Model.StartTime.ToString(@"hh\:mm") - @Model.EndTime.ToString(@"hh\:mm")" class="form-control bg-light" readonly />
            </div>

            <div class="form-group mb-3">
                <label for="inquiry" class="font-weight-bold">Your Inquiry:</label>
                <input type="text" id="inquiry" name="Notes" value="@Model.Notes" class="form-control" placeholder="Enter your inquiry" readonly />
            </div>

            <div class="form-group mb-4">
                <label for="userEmail" class="font-weight-bold">Please enter your email:</label>
                <input type="email" id="userEmail" name="UserEmail" class="form-control" value="@Model.UserEmail" required />
            </div>

            <button id="confirmButton" class="btn btn-primary w-100 py-2">Confirm Appointment</button>
        </form>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.getElementById("confirmButton").addEventListener("click", async function (event) {
        event.preventDefault();

        const data = {
            LibrarianID: @Model.LibrarianID,
            LibrarianName: document.getElementById("librarianName").value,
            AppointmentDate: document.getElementById("appointmentDate").value,
            StartTime: document.getElementById("time").value.split(" - ")[0] + ":00",
            EndTime: document.getElementById("time").value.split(" - ")[1] + ":00",
            Notes: document.getElementById("inquiry").value,
            UserEmail: document.getElementById("userEmail").value
        };

        try {
            const response = await fetch('/api/LibrarianAppointment/confirm', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Appointment Confirmed!',
                    showConfirmButton: true,
                    timer: 3000
                }).then(() => {
                    window.location.href = '/api/LibrarianAppointment/create';
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: result.message || "There was an error with your appointment.",
                    showConfirmButton: true,
                    timer: 3000
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: "An error occurred while processing your request.",
                showConfirmButton: true,
                timer: 3000
            });
        }
    });

    document.addEventListener("DOMContentLoaded", function () {
        const message = @Html.Raw(JsonSerializer.Serialize(TempData["Message"]));
        const messageType = '@TempData["MessageType"]';

        if (messageType) {
            if (messageType === "success") {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    showConfirmButton: true,
                    timer: 3000
                });
            } else if (messageType === "error") {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    showConfirmButton: true,
                    timer: 3000
                });
            }
        }
    });
</script>

<style>
    .form-control[readonly] {
        background-color: #f8f9fa;
        cursor: not-allowed;
    }

    label {
        font-weight: bold;
    }
</style>